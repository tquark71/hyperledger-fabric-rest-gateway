---
swagger: "2.0"
info:
  version: "1.0.0"
  title: "Hyperledger Fabric Gateway API"
host: "localhost:4000"
basePath: "/"
schemes:
- "http"
produces:
- "application/json"
paths:
  /channel/list:
    post:
      tags:
      - "Channel"
      summary: "Query all channel on a peer"
      description: "Query a self organization's peer to get all channel this peer join."
      operationId: "getChannels"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "query channels request"
        required: true
        schema:
          type: "object"
          required: ["peerName", "user"]
          properties:
            peerName:
              type: "string"
              example: peer1
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "channel"
  /channel/info:
    post:
      tags:
      - "Channel"
      summary: "Query channel's info"
      description: "Get informations, like height, current hash... and so on, of a channel"
      operationId: "getChainInfo"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "query channel info request"
        required: true
        schema:
          type: "object"
          required: ["peerName", "user","channelName"]
          properties:
            peerName:
              type: "string"
              example: peer1
            channelName:
              type: "string"
              example: mychannel
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            type: object
            properties:
              sdkResult:
                type: string
                description: Query channel info success
                example: '{"height":{"low":4,"high":0,"unsigned":true},"currentBlockHash":{"buffer":{"type":"Buffer","data":[8,4,18,....,166,52]},"offset":4,"markedOffset":-1,"limit":36,"littleEndian":true,"noAssert":false},"previousBlockHash":{"buffer":{"type":"Buffer","data":[8,4,18,....,52]},"offset":38,"markedOffset":-1,"limit":70,"littleEndian":true,"noAssert":false}}'
        500:
          description: "Error response"
          schema:
            $ref: '#/definitions/MultiResponses'
          examples:
            application/json: |-
                // Non-validating peer
                {"sdkResult": "Error: can not get peer $peerName in org $orgName"},

                // Invailed channel name
                {"sdkResult": "Error: invailed channel name, plz check your network config has the config of channel $channelName"}
      x-swagger-router-controller: "channel"
  /channel/addOrg:
    post:
      tags:
      - "Channel"
      summary: "Add an org to a channel"
      description: "Send a resquest to add a org to a existed channel, gatewau will send request to hyperledger to get channel config
      and use this config to add additional org.\n
      There are to method to get new org's information to add to config file.\n First is file system, you need to pass the org's name, mspID to the request\n
      Second, pass based46 encoded certification to gateway.
      Both two method will leverage \"configlator\" to calculate confing updata protobuffer, so make sure your configlater url has been set well before you trigger
      this api"
      operationId: "addOrg"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "add org request"
        required: true
        schema:
          type: "object"
          required: ["sourceType","user","channelName"]
          properties:
            channelName:
              type: "string"
              example: mychannel
            sourceType:
              enum: ["local","str"]
              type: "string"
              example: local
            type:
              type: "string"
              enum: ["peer","orderer"]
              example: peer
            mspID:
              type: "string"
              example: Org3MSP
            opt:
              type: "object"
              properties:
                orgName:
                  type: "string"
                  example: org1.example.com
                  description: "required if sourceType is 'fs',orgName which will be mapped to the folder in /artifacts/crypto-config"
                hashFamily:
                  type: "string"
                hashFunction:
                  type: "string"
                cacertStr:
                  description: "required if source type is 'str', a base64 encoded certification"
                  type: "string"
                tlscacertStr:
                  description: "required if source type is 'str', a base64 encoded certification"
                  type: "string"
                admincertStr:
                  description: "required if source type is 'str', a base64 encoded certification"
                  type: "string"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "channel"
  /channel/create:
    post:
      tags:
      - "Channel"
      summary: "Create a channel"
      description: "Create a new channel in the network, pass the genesis tx file name which suppose place under the path: /artifact/channel"
      operationId: "createChannel"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "create channels request"
        required: true
        schema:
          type: "object"
          required: ["channelName","sourceType","source","user"]
          properties:
            channelName:
              example: mychannel
              type: "string"
            sourceType:
              type: string
              description: Method to get the genesis tx file ###
              enum: ["local","buffer","signRequest"]
            source:
              example: mychannel.tx
              description: "Filename of genesis tx file in the /artifacts/channel/, obtained from the configgen tool."
              type: "string"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            type: object
            properties:
              sdkResult:
                type: string
                description: Create channel successfully!
                example: Channel $channelName created Successfully
        500:
          description: "Error response"
          schema:
            $ref: '#/definitions/MultiResponses'
          examples:
            application/json: |-
                // Enable using same channel name
                {"sdkResult": "Error: BAD_REQUEST"},

                // Create channel with error channel name
                {"sdkResult": "Error: invailed channel name, plz check your network config has the config of channel $channelName"},

                // Create channel with none existed tx
                {"sdkResult": "Error: ENOENT: no such file or directory, open '/fabric-v1.0-gateway/server/artifacts/channel/$source'"}
      x-swagger-router-controller: "channel"
  /channel/instantiated:
    post:
      tags:
      - "Channel"
      summary: "Query instantiated chaincode of the channel"
      description: "Send a request to a peer to query instantiated chaincode of the specific channel"
      operationId: "getInstantiatedChaincodes"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "query instantiated chaincodes request"
        required: true
        schema:
          type: "object"
          required: ["channelName","peerName","user"]
          properties:
            channelName:
              example: mychannel
              type: "string"
            peerName:
              example: peer1
              type: "string"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "channel"
  /channel/join:
    post:
      tags:
      - "Channel"
      summary: "Join channel"
      description: "Send a request to all peer of self organization to join the channel"
      operationId: "joinChannel"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "join channel request"
        required: true
        schema:
          type: "object"
          required: ["channelName","user"]
          properties:
            opt:
              example: {"org1": ["peer1", "peer2"]} ###
              description: "Manually join peers into channel." ###
              type: object
            channelName:
              example: mychannel
              type: "string"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            type: object
            properties:
              sdkResult:
                type: string
                description: Join channel successfully!
                example: Successfully joined peers in organization $orgName to the channel $channelName
        500:
          description: "Error response"
          schema:
            $ref: '#/definitions/MultiResponses'
          examples:
            application/json: |-
                // Repeatedly join same org peer in the channel
                {"sdkResult": ["Error: chaincode error (status: 500, message: Cannot create ledger from genesis block, due to LedgerID already exists)","Error: chaincode error (status: 500, message: Cannot create ledger from genesis block, due to LedgerID already exists)"]}

                // Invailed Channel name
                {"sdkResult": "Error: invailed channel name, plz check your network config has the config of channel $channelName"}
      x-swagger-router-controller: "channel"
  /channel/config:
    post:
      tags:
      - "Channel"
      summary: "Join channel"
      description: "Send a request to a orderer to get the channel's config buffer"
      operationId: "getChannelConfig"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Get channel config request"
        required: true
        schema:
          type: "object"
          required: ["channelName","user"]
          properties:
            channelName:
              example: mychannel
              type: "string"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            type: object
            properties:
              sdkResult:
                type: string
                description: Query channel config
                example: '{"type":"Buffer","data":[10,162,69.......,102]}'
        500:
          description: "Error response"
          schema:
            $ref: '#/definitions/MultiResponses'
          examples:
            application/json: |-
                // Query channel config with error name
                {"sdkResult":" Can't find $channelName channel"}
      x-swagger-router-controller: "channel"
  /channel/update:
    post:
      tags:
      - "Channel"
      summary: "Update channel"
      description: "Send a request to a orderer to update the channel's config"
      operationId: "updateChannel"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Update channel config request"
        required: true
        schema:
          type: "object"
          required: ["channelName","sourceType","user","source"]
          properties:
            channelName:
              type: "string"
              example: mychannel
            source:
              example: updateConfigEx.pb
            sourceType:
              type: "string"
              enum: ["local","buffer","signRequest"]
              example: local
              description: "File's name, under the path /artifact/channel, of configUpdate proto buffer generated by configlator"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "channel"
  /channel/init:
    post:
      tags:
      - "Channel"
      summary: "Init channel"
      description: "Send a request to init a channel obj(get msp config and so on)"
      operationId: "initChannel"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Init channel request"
        required: true
        schema:
          type: "object"
          required: ["channelName","user"]
          properties:
            channelName:
              type: "string"
              example: mychannel
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "channel"

  /chaincode/install:
    post:
      tags:
      - "Chaincode"
      summary: "Install chaincode"
      description: "Install chaincode on the channel at all endorse peers"
      operationId: "chaincodeInstall"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "install request"
        required: true
        schema:
          type: "object"
          required: ["chaincodeName","channelName","chaincodePath","chaincodeVersion","sourceType",langType,"user"]
          properties:
            chaincodeName:
              example: mycc
              type: "string"
            channelName:
              type: "string"
              example: mychannel
              # required: true
            chaincodePath:
              type: "string"
              example: chaincodes/testCC
              # required: true
            chaincodeVersion:
              type: "string"
              example: v1
            sourceType:
              enum: ["sourceCode", "package"]
              type: "string"
              example: sourceCode
            langType:
              enum: [golang,node,java]
              type: string
              example: golang
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            type: object
            properties:
              sdkResult:
                type: string
                description: Install chaincode successfully
                example: Successfully Installed chaincode on organization $orgName
        500:
          description: "Error response"
          schema:
            $ref: '#/definitions/MultiResponses'
          examples:
            application/json: |-
                // Enable install chaincode again
                {"sdkResult":[{"url":"grpc://localhost:7051","response": "Error: chaincode error (status: 500, message: Error installing chaincode code $chaincodeName:$chaincodeVersion(chaincode /var/hyperledger/production/$chaincodePath.$chaincodeVersion exists))"}]},

                // Install chaincode with unexist path (Error)
                {"sdkResult": "Error: ENOENT: no such file or directory, lstat '/fabric-v1.0-gateway/server/gopath/src/$chaincodePath'"},

                // Install chaincode in unexist channel
                {"sdkResult": "Error: channel : $channelName did not exist in channel config"}
      x-swagger-router-controller: "chaincode"
  /chaincode/data:
    post:
      tags:
      - "Chaincode"
      summary: "query chaincode data"
      description: "query chaincode data from sepcific peer"
      operationId: "getChaincodeData"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "install request"
        required: true
        schema:
          type: "object"
          required: ["chaincodeName","channelName","peerName","user"]
          properties:
            chaincodeName:
              example: mycc
              type: "string"
            peerName:
              example: peer1
              type: "string"
            channelName:
              type: "string"
              example: mychannel
            user:
              $ref: "#/definitions/user"
              # required: true
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "channel"
  /chaincode/instantiate:
    post:
      tags:
      - "Chaincode"
      summary: "instantiate chaincdoe"
      description: "instantiate chaincode at all endorse peers of a channel, chaincode should be install chaincode on peer first"
      operationId: "chaincodeInstantiate"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Instantiate request"
        required: true
        schema:
          type: "object"
          required: [
        "channelName",
        "chaincodeName",
        "chaincodeVersion",
        "functionName",
        "args",
        "user"
    ]
          properties:
            chaincodeName:
              type: "string"
              example: mycc
            channelName:
              type: "string"
              example: mychannel
            chaincodeVersion:
              type: "string"
              example: v1
            functionName:
              type: "string"
              example: init
            args:
              type: "array"
              example: ["a","100","b","200"]
              items:
                type: "string"
            opt:
              type: "object"
              properties:
                endorsement-policy:
                  type: string
                  $ref: "#/definitions/endorsement-policy"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            type: object
            properties:
              sdkResult:
                type: string
                description: Instantiate chaincode successfully
                example: instantiate successful
        500:
          description: "Error response"
          schema:
            $ref: '#/definitions/MultiResponses'
          examples:
            application/json: |-
                // Instantiate chaincode again
                {"sdkResult":[{"url":"grpcs://localhost:7051","response":"Error: chaincode error (status: 500, message: chaincode exists mycc)"}]},

                // Org did not have such chaincode
                {"sdkResult":[{"url":"grpcs://localhost:7051","response":"Error: chaincode error (status: 500, message: cannot get package for the chaincode to be instantiated ($chaincodeName:$chaincodeVersion)-open /var/hyperledger/production/chaincodes/$chaincodeName.$chaincodeVersion: no such file or directory)"}]},

                // Invailed channel name
                {"sdkResult":"Error: invailed channel name, plz check your network config has the config of channel $channelName"},

                // Instantiate chaincode with error args
                {"sdkResult":"Error: Transaction returned with failure: Incorrect number of arguments. Expecting 4"}
      x-swagger-router-controller: "chaincode"
  /chaincode/upgrade:
    post:
      tags:
      - "Chaincode"
      summary: "upgrade chaincdoe"
      description: "upgrade chaincode at all endorse peer of a channel, chaincode should be install chaincode on peer first"
      operationId: "chaincodeUpgrade"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "upgrade request"
        required: true
        schema:
          type: "object"
          required: [
        "channelName",
        "chaincodeName",
        "chaincodeVersion",
        "functionName",
        "args",
        "user"
    ]
          properties:
            chaincodeName:
              type: "string"
              example: mycc
            channelName:
              type: "string"
              example: mychannel
            chaincodeVersion:
              type: "string"
              example: v1
            functionName:
              type: "string"
              example: init
            args:
              type: "string"
              example: ["a","1000","b","200"]
            user:
              $ref: "#/definitions/user"
            opt:
              type: "object"
              properties:
                endorsement-policy:
                  type: string
                  $ref: "#/definitions/endorsement-policy"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "chaincode"
  /chaincode/invoke:
    post:
      tags:
      - "Chaincode"
      summary: "invoke chaincdoe"
      description: "Send endorse request to all endorse peer on the channel at one time, then send the reponse to order if there any response is good, it may cause rejection of insufficiency endorsement"
      operationId: "chaincodeInvoke"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Instantiate request"
        required: true
        schema:
          type: "object"
          required: ["channelName", "chaincodeName", "functionName", "args", "user"]
          properties:
            chaincodeName:
              type: "string"
              example: mycc
            channelName:
              type: "string"
              example: mychannel
            functionName:
              type: "string"
              example: invoke
            args:
              type: "array"
              example: ["move","a","b","10"]
              items:
                type: "string"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "chaincode"
  /chaincode/invokeE:
    post:
      tags:
      - "Chaincode"
      summary: "invoke chaincdoe with endorsepolicy"
      description: "Different with \"\/chaincode\/invoke\", this rest api will handle the endorse request based on endorse policy, to invoke this api, you should make sure your monitr module has been enabled"
      operationId: "chaincodeInvokeE"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Instantiate request"
        required: true
        schema:
          type: "object"
          required: ["channelName", "chaincodeName", "functionName", "args", "user"]
          properties:
            chaincodeName:
              type: "string"
              example: mycc
            channelName:
              type: "string"
              example: mychannel
            functionName:
              type: "string"
              example: invoke
            args:
              type: "array"
              example: ["move","a","b","10"]
              items:
                type: "string"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "chaincode"
  /chaincode/query:
    post:
      tags:
      - "Chaincode"
      summary: "query chaincode"
      description: "Send qeury request to all peer of self organiztion, then compare each result, if any result is different from others, the gateway will send back a array contained all peer's responses, if not, gateway will just send a resonpse back"
      operationId: "chaincodeQuery"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Instantiate request"
        required: true
        schema:
          type: "object"
          required: ["channelName", "chaincodeName", "functionName", "args", "user"]
          properties:
            chaincodeName:
              type: "string"
              example: mycc
            channelName:
              type: "string"
              example: mychannel
            functionName:
              type: "string"
              example: invoke
            args:
              type: "array"
              example: ["query","a"]
              items:
                type: "string"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"

      x-swagger-router-controller: "chaincode"
  /chaincode/queryHistory:
    post:
      tags:
      - "Chaincode"
      summary: "query chaincdoe"
      description: "Send qeury request to all peer of self organiztion, then compare each result, if any result is different from others, the gateway will send back a array contained all peer's responses, if not, gateway will just send a resonpse back"
      operationId: "chaincodeQueryHistory"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "query history request"
        required: true
        schema:
          type: "object"
          required: ["channelName", "chaincodeName", "functionName", "args", "user"]
          properties:
            chaincodeName:
              type: "string"
              example: "mycc"
            channelName:
              type: "string"
              example: "mychannel"
            functionName:
              type: "string"
              example: "query"
            args:
              type: "array"
              example: ["a"]
              items:
                type: "string"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "chaincode"
  /chaincode/installed:
    post:
      tags:
      - "Chaincode"
      summary: "query installed chaincdoe"
      description: "get installed chaincode from a self organiztion's peer, peer's name and url was mapped on the network-config"
      operationId: "getInstalledChaincodes"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "query history request"
        required: true
        schema:
          type: "object"
          required: ["peerName", "user"]
          properties:
            peerName:
              type: "string"
              example: peer1
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "chaincode"


  /networkConfig/networkConfig/add/org:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "nAddPeers"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: ["orgName",peers","user"]
          properties:
            orgName:
              type: string
            peers:
              type: object
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"
  /networkConfig/networkConfig/add/peer:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "nAddPeers"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: ["orgName","peer","user"]
          properties:
            orgName:
              type: string
            peer:
              type: object
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"
  /networkConfig/networkConfig/add/orderer:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "nAddOrderer"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: [ordererName, url, serverHostName, tlsCacerts,"user"]
          properties:
            ordererName:
              type: string
            url:
              type: string
            serverHostName:
              type: string
            tlsCacerts:
              type: string
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"
  /networkConfig/networkConfig/remove/org:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "nRemoveOrgs"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: [orgName,"user"]
          properties:
            orgName:
              type: string
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"
  /networkConfig/networkConfig/remove/peer:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "nRemovePeers"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: ["orgName","peerName","user"]
          properties:
            orgName:
              type: string
            peerName:
              type: string
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"
  /networkConfig/networkConfig/remove/orderer:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "nRemoveOrderers"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: ["ordererName","user"]
          properties:
            ordererName:
              type: string
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"
  /networkConfig/networkConfig/revise/org:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "nReviseOrg"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: [orgName, attribute, value,"user"]
          properties:
            orgName:
              type: string
            attribute:
              type: string
            value:
              type: object
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"

  /networkConfig/networkConfig/revise/peer:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "nRevisePeer"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: [orgName, peerName, attribute, value,"user"]
          properties:
            orgName:
              type: string
            peerName:
              type: string
            attribute:
              type: string
            value:
              type: string
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"

  /networkConfig/networkConfig/revise/orderer:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "nReviseOrderer"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: [ordererName, attribute, value,"user"]
          properties:
            ordererName:
              type: string
            attribute:
              type: string
            value:
              type: string
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"


####### channel config
  /networkConfig/channelConfig/add/channel:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "cAddChannel"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: [channelName]
          properties:
            channelName:
              type: string
            ordererNameArr:
              type: array
            orgObjArr:
              type: array
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"
  /networkConfig/channelConfig/add/org:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "cAddOrgInChannel"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: [channelName, orgName,"user"]
          properties:
            channelName:
              type: string
            orgName:
              type: string
            peerObjArr:
              type: array
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"
  /networkConfig/channelConfig/add/orderer:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "cAddOrdererInChannel"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: [channelName, ordererName,"user"]
          properties:
            channelName:
              type: string
            ordererName:
              type: string
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"
  /networkConfig/channelConfig/add/peer:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "cAddPeerInChannel"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: ["channelName","orgName","peerName","type","user"]
          properties:
            orgName:
              type: string
            channelName:
              type: string
            peerName:
              type: string
            type:
              type: string
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"
  /networkConfig/channelConfig/remove/org:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "cRemoveOrgInChannel"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: ["channelName","orgName","user"]
          properties:
            channelName:
              type: string
            orgName:
              type: string
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"
  /networkConfig/channelConfig/remove/peer:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "cRemovePeer"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: ["channelName","orgName","peerName","user"]
          properties:
            channelName:
              type: string
            orgName:
              type: string
            peerName:
              type: string
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"
  /networkConfig/channelConfig/remove/orderer:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "cRemoveOrdererInChannel"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: ["channelName","ordererName","user"]
          properties:
            channelName:
              type: string
            ordererName:
              type: string
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"
  /networkConfig/channelConfig/changeType/peer:
    post:
      tags:
      - "NetworkConfig"
      summary: ""
      description: ""
      operationId: "cChangePeerTypeChannel"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: [channelName, orgName, peerName, peerType]
          properties:
            channelName:
              type: string
            orgName:
              type: string
            peerName:
              type: string
            peerType:
              type: string
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
      x-swagger-router-controller: "networkConfig"


  /signRequest/sendRequest:
    post:
      tags:
      - "SignRequest"
      summary: "send signRequest"
      description: "API let you send a signRequest to other gateway to get signatures"
      operationId: "sendSignRequest"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "send SignRequest request"
        required: true
        schema:
          type: "object"
          required: ["uuid","user"]
          properties:
            uuid:
              type: string
              description: the uuid of sign request you want to send
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            type: object
            properties:
              sdkResult:
                type: string
                description: uuid of sign request you send
                example: 897df2c0-5072-4fad-9126-928e090f544a
      x-swagger-router-controller: "signRequest"
  /signRequest/create/channelConfig:
    post:
      tags:
      - "SignRequest"
      summary: "Create a signRequest"
      description: "Create a signRequest object in your gateway."
      operationId: "createChannelConfigSignReqeust"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        required: true
        schema:
          type: "object"
          required: ["channelName","name","sourceType","user","policy"]
          properties:
            name:
              type: string
              example: update mychannel
            description:
              example: I wanne upgrade channel mychannel, plz accept my request.
              type: string
            channelName:
              example: mychannel
              type: "string"
            sourceType:
              enum: ["buffer", "local"]
              type: "string"
              example: local
            opt:
              type: object
              properties:
                configUpdate:
                  type: object
                configUpdatePath:
                  type: string
                  example: configUpdateEx.pb
            policy:
              $ref: "#/definitions/endorsement-policy"
            user:
              $ref: "#/definitions/user"
              # required: true
      responses:
        200:
          description: "SDK response"
          schema:
            type: object
            properties:
              sdkResult:
                type: string
                description: uuid of sign request you create
                example: 897df2c0-5072-4fad-9126-928e090f544a
      x-swagger-router-controller: "signRequest"
  /signRequest/request:
    post:
      deprecated: true
      tags:
      - "SignRequest"
      summary: "api for receive request"
      description: "receive a signRequest"
      operationId: "receiveSignReqeust"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "install request"
        required: true
        schema:
          type: "object"
          required: ["uuid","toRole","type","creatorName","contentBytes","description","signRequestSignatureBytes"]
          properties:
            uuid:
              type: string
            description:
              type: string
            toRole:
              type: string
            type:
              example: mychannel
              type: "string"
            contentBytes:
              type: "object"
            signRequestSignatureBytes:
              type: "object"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "signRequest"
  /signRequest/response:
    post:
      deprecated: true
      tags:
      - "SignRequest"
      summary: "API for internal use"
      description: "api for receive sign request's response, should be triggered by gateway only"
      operationId: "receiveSignRequestResponse"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "install request"
        required: true
        schema:
          type: "object"
          required: ["uuid","status","responser","payload"]
          properties:
            uuid:
              type: string
            status:
              type: string
            responser:
              type: object
            payload:
              type: object
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "signRequest"
  /signRequest/outerRequest/accept:
    post:
      tags:
      - "SignRequest"
      summary: "api for sign and return a signRequest"
      description: "trigger this api to sign a signrequest with user in the request body."
      operationId: "signAndResponse"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        required: true
        schema:
          type: "object"
          required: ["uuid","toRole","user"]
          properties:
            toRole:
              type: string
              example: member
              description: Cause the uuid may have the different Role's request, you have to defined which role you wanna sign.
            uuid:
              description: uuid of signRequest you wanna sign
              type: string
            user:
              $ref: "#/definitions/user"
              # required: true
      responses:
        200:
          description: "SDK response"
          schema:
            type: object
            properties:
              sdkResult:
                type: string
                description: uuid of sign request you accept
                example: 897df2c0-5072-4fad-9126-928e090f544a
      x-swagger-router-controller: "signRequest"
  /signRequest/outerRequest/reject:
    post:
      tags:
      - "SignRequest"
      summary: "api for reject and return a signRequest"
      description: "trigger this api to reject a signrequest with user in the request body."
      operationId: "rejectAndResponse"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        required: true
        schema:
          type: "object"
          required: ["uuid","toRole","user","reason"]
          properties:
            toRole:
              type: string
              example: member
              description: Cause the uuid may have the different Role's request, you have to defined which role you wanna sign.
            uuid:
              description: uuid of signRequest you wanna sign
              type: string
            reason:
              description: reason you reject this signRequest
              type: string
              example: This configUpdate did not make sense.
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            type: object
            properties:
              sdkResult:
                type: string
                description: uuid of sign request you reject
                example: 897df2c0-5072-4fad-9126-928e090f544a
      x-swagger-router-controller: "signRequest"
  /signRequest/innerRequest/query:
    post:
      tags:
      - "SignRequest"
      summary: "query signRequest from DB"
      description: "Trigger this api can get the record of signRequest, you can add or omit conditions to match what you need"
      operationId: "queryInnerSignRequest"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "install request"
        required: true
        schema:
          type: "object"
          required: ["user"]
          properties:
            condition:
              type: object
              properties:
                type:
                  $ref: "#/definitions/sign-request-type"
                uuid:
                  type: string
                fullFilled:
                  type: boolean
                  description: is the signRequest fullfiled the policy
                  example: false
                creatorName:
                  type: string
                  example: orgAdmin
                  description: find the signRequest create by who
                from:
                  type: string
                  example: "2017-10-15"
                  description: start of time range - ISO formate
                to:
                  type: string
                  example: "2999-10-15"
                  description: end of time range - ISO formate
            user:
              $ref: "#/definitions/user"
            sortCondition:
                  type: object
                  example:
                    createTime: 1
                  description: mongo db's json format for reorder the docs
      responses:
        200:
          description: "SDK response"
          schema:
            type: object
            properties:
              sdk-result:
                $ref: "#/definitions/sign-request-array"
      x-swagger-router-controller: "signRequest"

  /signRequest/outerRequest/query:
    post:
      tags:
      - "SignRequest"
      summary: "query outer signRequest"
      description: "Trigger this api to get out request detail you want, you can add or delete conditions to match your need"
      operationId: "queryOuterSignRequest"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        required: true
        schema:
          type: "object"
          required: ["user"]
          properties:
            condition:
              type: object
              properties:
                type:
                  $ref: "#/definitions/sign-request-type"
                uuid:
                  type: string
                  description: condition-filter by uuid
                status:
                  type: string
                  example: PENDING
                  description: condition-filter by status
                name:
                  type: string
                  example: update mychannel
                  description: condition-filter by name
                fromMspID:
                  type: string
                  example: Org1MSP
                  description: condition-filter by source MSP
                toRole:
                  type: string
                  example: member
                  description: condition-filter by role signRequest wanted
                signerName:
                  type: string
                  example: none
                  description: condition-filter by signer name if existed
                from:
                  type: string
                  example: "2017-10-15"
                  description: start of time range - ISO formate
                to:
                  type: string
                  example: "2099-10-15"
                  description: end of time range - ISO formate

            user:
              $ref: "#/definitions/user"
            sortCondition:
                  type: object
                  description: mongo db's json format for reorder the docs
      responses:
        200:
          description: "SDK response"
          schema:
            type: object
            properties:
              sdkResult:
                $ref: "#/definitions/out-sign-request-array"
      x-swagger-router-controller: "signRequest"

  /block/action:
    post:
      tags:
      - "Block"
      summary: "Get parsed block info"
      description: "Get a block payload then parsed to readable JOSN"
      operationId: "getBlockActionByNumber"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Get block actions request"
        required: true
        schema:
          type: "object"
          required: ["channelName","blockNum","user","peerName"]
          properties:
            channelName:
              type: "string"
              example: mychannel
            peerName:
              type: "string"
              example: peer1
            blockNum:
              type: "string"
              example: "1"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "blockAndTx"
  /block/info:
    post:
      tags:
      - "Block"
      summary: "Get block info"
      description: "Get a block payload"
      operationId: "getBlockByNumber"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Get block request"
        required: true
        schema:
          type: "object"
          required: ["channelName","blockNum","user","peerName"]
          properties:
            channelName:
              type: "string"
              example: mychannel
            peerName:
              type: "string"
              example: peer1
            blockNum:
              type: "string"
              example: "1"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "blockAndTx"
  /member/list:
    post:
      tags:
      - "Member"
      summary: "Get member list"
      description: "Get registered members name"
      operationId: "getUserNameList"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Get list request"
        required: true
        schema:
          type: "object"
          required: ["user"]
          properties:
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "member"
  /member/cert:
    post:
      tags:
      - "Member"
      summary: "Get member's certification"
      description: "Accroding to the passed user object, get the certification"
      operationId: "getCertification"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Get cert request"
        required: true
        schema:
          type: "object"
          required: ["user"]
          properties:
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "member"
  /member/register:
    post:
      tags:
      - "Member"
      summary: "Register an user and enroll it"
      description: "Register the user and enroll it then user can use its ID and password to operate hyperledger"
      operationId: "registerAndEnrollUser"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Register and enroll request"
        required: true
        schema:
          type: "object"
          required: ["username","password","user"]
          properties:
            username:
              type: "string"
              example: userID
            password:
              type: string
              example: userpassword
            user:
              $ref: "#/definitions/caAdmin"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "member"
  /event/register/ccEvent/url:
    post:
      tags:
      - "Event"
      summary: "Register a url that the specific chaincode event will be sent to it"
      description: "Register a url that the specific chaincode event will be sent to it"
      operationId: "registerEventToUrl"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Register request"
        required: true
        schema:
          type: "object"
          required: [
        "chaincodeName",
        "eventName",
        "peerName",
        "user",
        "url"
    ]
          properties:
            chaincodeName:
              type: string
              example: mycc
            eventName:
              type: string
              example: testEvent
            peerName:
              type: string
              example: peer1
            url:
              type: string
              example: "http://test/url/used/to/recive/event"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "event"
  /event/unregister/ccEvent/url:
    post:
      tags:
      - "Event"
      summary: "Unregister a url that the specific chaincode event will be sent to it"
      description: "Unregister a url that the specific chaincode event will be sent to it"
      operationId: "unregisterEventToUrl"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Unregister request"
        required: true
        schema:
          type: "object"
          required: [
        "chaincodeName",
        "eventName",
        "peerName",
        "user",
        "url"
    ]
          properties:
            chaincodeName:
              type: string
              example: mycc
            eventName:
              type: string
              example: testEvent
            peerName:
              type: string
              example: peer1
            url:
              type: string
              example: "http://test/url/used/to/recive/event"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "event"

  /event/register/blockEvent/url:
    post:
      tags:
      - "Event"
      summary: "Register a url that the block event will be sent to it"
      description: "Register a url that the block event will be sent to it"
      operationId: "registerEventToUrl"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Register request"
        required: true
        schema:
          type: "object"
          required: [
        "peerName",
        "user",
        "url"
    ]
          properties:
            peerName:
              type: string
              example: peer1
            url:
              type: string
              example: "http://test/url/used/to/recive/event"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "event"
  /event/unregister/blockEvent/url:
    post:
      tags:
      - "Event"
      summary: "Unregister a url that the block event will be sent to it"
      description: "Unregister a url that the block event will be sent to it"
      operationId: "unregisterEventToUrl"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "Register request"
        required: true
        schema:
          type: "object"
          required: [
        "peerName",
        "user",
        "url"
    ]
          properties:
            peerName:
              type: string
              example: peer1
            url:
              type: string
              example: "http://test/url/used/to/recive/event"
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "event"
  /event/history/all:
    post:
      tags:
      - "Event"
      summary: "List all event history"
      description: "List all event history"
      operationId: "returnAllEventHistory"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "List request"
        required: true
        schema:
          type: "object"
          required: [
        "peerName",
        "user"
    ]
          properties:
            peerName:
              type: string
              example: peer1
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"

      x-swagger-router-controller: "event"
  /event/history/failed:
    post:
      tags:
      - "Event"
      summary: "List failed event history"
      description: "List failed event history"
      operationId: "returnFailedEventHistory"
      produces:
      - "application/json"
      parameters:
      - name: "request"
        in: "body"
        description: "List request"
        required: true
        schema:
          type: "object"
          required: [
        "peerName",
        "user"
    ]
          properties:
            peerName:
              type: string
              example: peer1
            user:
              $ref: "#/definitions/user"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "event"

  /monitor/peer/info:
    get:
      tags:
      - "Monitor"
      summary: "Get peer's info"
      description: "Get peer's info"
      operationId: "returnPeerInfo"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description:  "asccess token"
        required: true
        type: "string"
      - name: "peerName"
        in: "query"
        description: "peerName you want to query info"
        required: true
        # example: peer1
        type: "string"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "monitor"
  /monitor/block/trend:
    get:
      tags:
      - "Monitor"
      summary: "Get Blocks's txs number"
      description: "Get Blocks's txs number"
      operationId: "returnBlocksTrend"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description:  "asccess token"
        required: true
        type: "string"
      - name: "peerName"
        in: "query"
        description: "peerName you want to query info"
        required: true
        # example: peer1
        type: "string"
      - name: "channelName"
        in: "query"
        description: "channelName you want to query info"
        required: true
        # example: peer1
        type: "string"
      - name: "lastNumber"
        in: "query"
        description: "How many block you want to know the tx number"
        required: true
        # example: peer1
        type: "string"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "monitor"
  /monitor/channel/info:
    get:
      tags:
      - "Monitor"
      summary: "Get channel's info"
      description: "Get channel's info"
      operationId: "returnChannelInfo"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description:  "asccess token"
        required: true
        type: "string"
      - name: "peerName"
        # example: peer1
        in: "query"
        description: "peerName you want to query info"
        required: true
        type: "string"
      - name: "channelName"
        in: "query"
        # example: mychannel
        description: "channelName you want to query info"
        required: true
        type: "string"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "monitor"
  /monitor/block/info:
    get:
      tags:
      - "Monitor"
      summary: "Get block's info"
      description: "Get block's info"
      operationId: "returnBlockInfo"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description:  "asccess token"
        required: true
        type: "string"
      - name: "peerName"
        # example: peer1
        in: "query"
        description: "peerName you want to query info"
        required: true
        type: "string"
      - name: "channelName"
        in: "query"
        # example: mychannel
        description: "channelName you want to query info"
        required: true
        type: "string"
      - name: "blockNumber"
        in: "query"
        # example: "1"
        description: "blockNumber you want to query info"
        required: true
        type: "string"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "monitor"
  /monitor/tx/last:
    get:
      tags:
      - "Monitor"
      summary: "Get lastest tx info"
      description: "Get tx's info"
      operationId: "returnLastTxs"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description:  "asccess token"
        required: true
        type: "string"
      - name: "peerName"
        in: "query"
        # example: peer1
        description: "peerName you want to query info"
        required: true
        type: "string"
      - name: "channelName"
        in: "query"
        # example: mychannel
        description: "channelName you want to query info"
        required: true
        type: "string"
      - name: "lastNumber"
        in: "query"
        # example: "20"
        description: "How many tx want to query info"
        required: true
        type: "string"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "monitor"
  /monitor/chaincode/info:
    get:
      tags:
      - "Monitor"
      summary: "Get chaincode info"
      description: "Get chaincode info"
      operationId: "returnChaincodeInfo"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description:  "asccess token"
        required: true
        type: "string"
      - name: "peerName"
        in: "query"

          # example: peer1
        description: "peerName you want to query info"
        required: true
        type: "string"
      - name: "channelName"
        in: "query"
        # example: mychannel
        description: "channelName you want to query info"
        required: true
        type: "string"
      - name: "chaincodeName"
        in: "query"
        # example: mycc
        description: "chaincode name you want to query info"
        required: true
        type: "string"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "monitor"
  /monitor/network/info:
    get:
      tags:
      - "Monitor"
      summary: "Get network-config"
      description: "Get network-config"
      operationId: "returnNetworkConfig"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description:  "asccess token"
        required: true
        type: "string"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "monitor"
  /monitor/network/status:
    get:
      tags:
      - "Monitor"
      summary: "Get network-config"
      description: "Get network-config"
      operationId: "returnAliveState"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description:  "asccess token"
        required: true
        type: "string"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "monitor"
  /monitor/network/my:
    get:
      tags:
      - "Monitor"
      summary: "Get self network-config"
      description: "Get self network-config"
      operationId: "returnSelfNetworkConfig"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description:  "asccess token"
        required: true
        type: "string"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "monitor"
  /login:
    get:
      tags:
      - "Monitor"
      summary: "Monitor login api"
      description: "Monitor login api, username and password are defined in the monitor/userDb.json"
      operationId: "loginMonitor"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "username you want to query info"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "peerName you want to query info"
        required: true
        type: "string"
      responses:
        200:
          description: "SDK response"
          schema:
            $ref: "#/definitions/sdkResoponse"
      x-swagger-router-controller: "monitor"

definitions:
  sdkResoponse:
    properties:
      sdkResult:
        type: "object"

  user:
    required: [enrollID,enrollSecret]
    properties:
        enrollID:
          type: "string"
          example: orgAdmin
        enrollSecret:
          type: "string"
          example: "87654321"
  caAdmin:
    required: [enrollID,enrollSecret]
    properties:
        enrollID:
          type: "string"
          example: caAdmin
        enrollSecret:
          type: "string"
          example: "87654321"
  sign-request-array:
    type: array
    items:
      type: "object"
      properties:
        uuid:
          type: string
        name:
          type: string
        type:
          type: string
        description:
          type: string
        policy:
          type: object
        contentBytes:
          type: object
        creatorName:
          type: string
        createTime:
          type: string
        responses:
          type: array
  out-sign-request-array:
    type: array
    items:
      type: "object"
      properties:
        uuid:
          type: string
        name:
          type: string
        type:
          type: string
        description:
          type: string
        signRequestSignatureBytes:
          type: object
        contentBytes:
          type: object
        toRole:
          type: string
        status:
          type: string
        fromMspID:
          type: string
        signerName:
          type: string
        receiveTime:
          type: string
  sign-request-type:
    type: string
    enum: [CHAINCODE_CONFIG_REQUEST,CHAINCODE_PACKAGE_REQUEST]
    example: CHAINCODE_CONFIG_REQUEST
  endorsement-policy:
    properties:
      identities:
        type: array
        items:
          type: "object"
          properties:
            role:
              type: object
              properties:
                name:
                  type: string
                  enum: [member,admin]
                mspId:
                  type: string
        example:
          - role:
              name: member
              mspId: Org2MSP
          - role:
              name: member
              mspId: Org1MSP
      policy:
        type: object
        example:
          2-of: [
            signed-by: 0,
            signed-by: 1
            ]

  MultiResponses:
    type: array
    items:
    - $ref: '#/definitions/MultiResponsesItem'
  MultiResponsesItem:
    type: object
    properties:
      sdkResult:
        type: string
        description: Error Code Description

        # 200:
        #   description: "SDK response"
        #   schema:
        #     type: object
        #     properties:
        #       sdkResult:
        #         type: string
        #         description: Create channel successfully!
        #         example: Channel $channelName created Successfully