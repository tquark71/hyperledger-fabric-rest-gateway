/*
Copyright IBM Corp. 2016 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

option go_package = "github.com/hyperledger/fabric/protos/peer";
option java_package = "org.hyperledger.fabric.protos.peer";
option java_outer_classname = "ProposalResponsePackage";

package protos;


// A ProposalResponse is returned from an endorser to the proposal submitter.
// The idea is that this message contains the endorser's response to the
// request of a client to perform an action over a chaincode (or more
// generically on the ledger); the response might be success/error (conveyed in
// the Response field) together with a description of the action and a
// signature over it by that endorser.  If a sufficient number of distinct
// endorsers agree on the same action and produce signature to that effect, a
// transaction can be generated and sent for ordering.
message chaincodeData {

	// Version indicates message protocol version
	string name = 1;

	// Timestamp is the time that the message
	// was created as  defined by the sender
	string version = 2;

    string escc =3;

    string vscc=4;

    bytes policy=5;
    bytes data=6;
    bytes id=7;
	// A response message indicating whether the
	// endorsement of the action was successful
	// Response response = 4;

	// The payload of response. It is the bytes of ProposalResponsePayload
	// bytes payload = 5;

	// The endorsement of the proposal, basically
	// the endorser's signature over the payload
	// Endorsement endorsement = 6;
}
message DeployInput {
    string function = 1;
    ChaincodeInput args =2 ;

}

message ChaincodeInput {
    repeated bytes args  = 1;
}

// message CcInput {
//     enum Type{
//         UNDEFINED=0;
//         GOLANG=1;
//         NODE=2;
//         CAR=3;
//         JAVA=4;
//     }

//     Type type=1;
//     ChaincodeID chaincode_id = 2;
//     Input input=3;
//     int32 timeout=4;
// }
// message ChaincodeID {
//     string path=1;
//     string name=2;
//     string version=3;
// }

// message Input {
//     repested bytes args=1;
// }
// A response with a representation similar to an HTTP response that can
// be used within another message.
